{"file_contents":{"MOBILE_BUILD_GUIDE.md":{"content":"# ToyResaleWizard Mobile App Build Guide\n\n## Quick Start Commands\n\n### Development\n```bash\n# Start web development server\nnpm run dev\n\n# Build and sync mobile platforms\nnpm run build\nnpx cap sync\n\n# Open in native IDEs\nnpx cap open ios      # For iOS\nnpx cap open android  # For Android\n```\n\n### Running on Device\n```bash\n# iOS\nnpx cap run ios --target=\"iPhone 15\"\n\n# Android\nnpx cap run android --target=\"Pixel_7_API_34\"\n```\n\n### Live Reload Development\n```bash\n# Start dev server first\nnpm run dev\n\n# Then run with live reload\nnpx cap run ios --livereload --external\nnpx cap run android --livereload --external\n```\n\n## Mobile App Features\n\n### Native Camera Integration\n- **High-Quality Camera**: Native camera plugin provides better image quality than web APIs\n- **Gallery Access**: Select photos from device photo library\n- **Permission Handling**: Automatic camera and photo library permissions\n- **Cross-Platform**: Consistent API across iOS and Android\n\n### Push Notifications\n- **Real-Time Updates**: Receive notifications about scan status and marketplace listings\n- **Background Processing**: Notifications work even when app is closed\n- **Custom Actions**: Quick reply and action buttons in notifications\n\n### Mobile UI Optimizations\n- **Touch-First Design**: Large touch targets optimized for mobile interaction\n- **Native Navigation**: Bottom tab bar with smooth animations\n- **Safe Area Support**: Handles device notches and home indicators\n- **Platform-Specific Styling**: Follows iOS and Android design guidelines\n\n## Development Workflow\n\n### 1. Web Development\nUse the web development workflow for rapid iteration:\n```bash\nnpm run dev\n```\nOpen http://localhost:5000 in browser for immediate feedback.\n\n### 2. Mobile Testing\nTest native features on device or simulator:\n```bash\n# Build frontend\nnpm run build\n\n# Sync with mobile platforms\nnpx cap sync\n\n# Run on iOS\nnpx cap run ios\n\n# Run on Android\nnpx cap run android\n```\n\n### 3. Live Reload (Recommended)\nBest of both worlds - web development speed with native testing:\n```bash\n# Terminal 1: Start dev server\nnpm run dev\n\n# Terminal 2: Run with live reload\nnpx cap run ios --livereload --external\n# or\nnpx cap run android --livereload --external\n```\n\n## Build and Distribution\n\n### iOS App Store Distribution\n1. **Open Xcode Project**\n   ```bash\n   npx cap open ios\n   ```\n\n2. **Configure Signing**\n   - Select your Apple Developer Team\n   - Configure Bundle Identifier: `com.toyresalewizard.app`\n   - Set up provisioning profiles\n\n3. **Archive and Upload**\n   - Product → Archive in Xcode\n   - Upload to App Store Connect\n   - Submit for review\n\n### Google Play Store Distribution\n1. **Open Android Studio**\n   ```bash\n   npx cap open android\n   ```\n\n2. **Generate Signed Bundle**\n   - Build → Generate Signed Bundle/APK\n   - Create/use existing keystore\n   - Generate AAB file for Play Store\n\n3. **Upload to Play Console**\n   - Upload AAB to Google Play Console\n   - Configure store listing\n   - Submit for review\n\n## Configuration Files\n\n### capacitor.config.ts\nMain configuration for both platforms:\n```typescript\n{\n  appId: 'com.toyresalewizard.app',\n  appName: 'ToyResaleWizard',\n  webDir: 'client/dist',\n  plugins: {\n    Camera: {\n      permissions: ['camera', 'photos']\n    },\n    PushNotifications: {\n      presentationOptions: ['badge', 'sound', 'alert']\n    }\n  }\n}\n```\n\n### Native Platform Folders\n- `ios/`: Xcode project and iOS-specific configurations\n- `android/`: Android Studio project and Android-specific configurations\n\n## Troubleshooting\n\n### Common Issues\n\n**Build Errors**\n```bash\n# Clean and rebuild\nnpx cap clean\nnpx cap sync\n```\n\n**Permission Issues**\n- Check capacitor.config.ts plugin permissions\n- Verify native platform permissions are properly configured\n\n**Live Reload Connection Issues**\n- Ensure device and development machine are on same network\n- Check firewall settings\n- Use `--external` flag with live reload\n\n**Platform Sync Issues**\n```bash\n# Remove and re-add platforms\nnpx cap clean\nnpx cap add ios\nnpx cap add android\nnpx cap sync\n```\n\n### Debug Tools\n\n**Web Debugging**\n- Chrome DevTools for Android debugging\n- Safari Web Inspector for iOS debugging\n\n**Native Debugging**\n- Xcode debugger and console for iOS\n- Android Studio debugger and Logcat for Android\n\n## Native API Usage Examples\n\n### Camera Integration\n```typescript\nimport { useNativeCamera } from '@/hooks/use-native-camera';\n\nfunction CameraComponent() {\n  const { takePicture, selectFromGallery, isNative } = useNativeCamera();\n  \n  const handleCamera = async () => {\n    if (isNative) {\n      const photo = await takePicture();\n      // Process native photo\n    } else {\n      // Web fallback\n    }\n  };\n}\n```\n\n### Push Notifications\n```typescript\nimport { useNativeFeatures } from '@/hooks/use-native-features';\n\nfunction NotificationComponent() {\n  const { requestNotificationPermissions } = useNativeFeatures();\n  \n  const setupNotifications = async () => {\n    const granted = await requestNotificationPermissions();\n    if (granted) {\n      // Setup notification listeners\n    }\n  };\n}\n```\n\n## Performance Optimization\n\n### Bundle Size\n- Native apps include only necessary dependencies\n- Tree shaking eliminates unused code\n- Platform-specific code splitting\n\n### Loading Performance\n- Splash screen configuration in capacitor.config.ts\n- Lazy loading for non-critical components\n- Image optimization for mobile screens\n\n### Memory Management\n- Efficient image handling for camera captures\n- Proper cleanup of native listeners\n- Optimized list rendering for large datasets\n\n## Security Considerations\n\n### Data Protection\n- Encrypted local storage for sensitive data\n- Secure file handling for camera captures\n- Network security with certificate pinning\n\n### Permissions\n- Minimal permission requests\n- Clear permission explanations to users\n- Graceful degradation when permissions denied\n\n### App Store Requirements\n- Privacy policy inclusion\n- Age rating configuration\n- Compliance with platform guidelines","size_bytes":5997},"capacitor.config.ts":{"content":"import type { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  appId: 'com.toyresalewizard.app',\n  appName: 'ToyResaleWizard',\n  webDir: 'client/dist',\n  server: {\n    androidScheme: 'https'\n  },\n  plugins: {\n    Camera: {\n      permissions: ['camera', 'photos']\n    },\n    PushNotifications: {\n      presentationOptions: ['badge', 'sound', 'alert']\n    },\n    StatusBar: {\n      style: 'default'\n    },\n    SplashScreen: {\n      launchShowDuration: 3000,\n      launchAutoHide: true,\n      backgroundColor: '#3b82f6',\n      androidSplashResourceName: 'splash',\n      androidScaleType: 'CENTER_CROP',\n      showSpinner: false\n    }\n  },\n  ios: {\n    scheme: 'ToyResaleWizard'\n  },\n  android: {\n    allowMixedContent: true\n  }\n};\n\nexport default config;\n","size_bytes":781},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"mobile-setup.md":{"content":"# ToyResaleWizard Mobile App Setup\n\n## Overview\nToyResaleWizard has been converted from a PWA to a native mobile application using Capacitor by Ionic. This allows the React web application to run in native iOS and Android containers while accessing native device features.\n\n## Mobile Features Implemented\n\n### Native Camera Integration\n- **Native Camera Plugin**: Direct access to device camera with higher quality capture\n- **Photo Gallery Access**: Select existing photos from device gallery\n- **Permission Management**: Automatic camera and photo library permission requests\n- **Cross-platform Support**: Works on both iOS and Android with consistent API\n\n### Push Notifications\n- **Real-time Updates**: Receive notifications about scan completion and marketplace listing status\n- **Background Processing**: Continue receiving updates even when app is in background\n- **Custom Notification Actions**: Quick actions directly from notifications\n\n### Mobile-Optimized UI\n- **Touch-First Design**: Large touch targets and mobile-friendly interactions\n- **Native Navigation**: Bottom tab navigation optimized for thumb navigation\n- **Platform-Specific Styling**: Follows iOS and Android design guidelines\n- **Safe Area Support**: Handles device notches and home indicators\n\n## Building Mobile Apps\n\n### Prerequisites\n- Node.js and npm installed\n- Xcode (for iOS development)\n- Android Studio (for Android development)\n- Capacitor CLI installed globally: `npm install -g @capacitor/cli`\n\n### Build Commands\n\n#### Build Web Assets\n```bash\nnpm run build\n```\n\n#### Sync with Mobile Platforms\n```bash\nnpx cap sync\n```\n\n#### Open in Native IDEs\n```bash\n# iOS\nnpx cap open ios\n\n# Android  \nnpx cap open android\n```\n\n#### Build for Production\n```bash\n# iOS\nnpx cap build ios\n\n# Android\nnpx cap build android\n```\n\n## Development Workflow\n\n### 1. Development Mode\n- Run `npm run dev` for web development with hot reload\n- Use browser dev tools for UI debugging\n- Test native features using device simulator/emulator\n\n### 2. Testing on Device\n```bash\n# Build and sync\nnpm run build\nnpx cap sync\n\n# Run on device\nnpx cap run ios --target=\"Your Device\"\nnpx cap run android --target=\"Your Device\"\n```\n\n### 3. Live Reload on Device\n```bash\n# Start dev server\nnpm run dev\n\n# Update capacitor.config.ts with your local IP\nnpx cap run ios --livereload --external\nnpx cap run android --livereload --external\n```\n\n## Native Features Integration\n\n### Camera API Usage\n```typescript\nimport { useNativeCamera } from '@/hooks/use-native-camera';\n\nconst { takePicture, selectFromGallery, isNative } = useNativeCamera();\n\n// Take photo with native camera\nconst photo = await takePicture();\n\n// Select from gallery\nconst galleryPhoto = await selectFromGallery();\n```\n\n### Push Notifications\n```typescript\nimport { useNativeFeatures } from '@/hooks/use-native-features';\n\nconst { requestNotificationPermissions, showNotification } = useNativeFeatures();\n\n// Request permissions\nawait requestNotificationPermissions();\n\n// Show notification\nawait showNotification('Scan Complete', 'Your toy analysis is ready!');\n```\n\n## Configuration Files\n\n### capacitor.config.ts\n- App metadata and bundle identifiers\n- Platform-specific configurations\n- Plugin permissions and settings\n- Splash screen and status bar customization\n\n### Native Platform Folders\n- `ios/`: Native iOS project files\n- `android/`: Native Android project files\n- Auto-generated from Capacitor, minimal manual editing required\n\n## Distribution\n\n### iOS App Store\n1. Open project in Xcode: `npx cap open ios`\n2. Configure signing certificates and provisioning profiles\n3. Archive and upload to App Store Connect\n4. Submit for review through App Store Connect\n\n### Google Play Store\n1. Open project in Android Studio: `npx cap open android`\n2. Generate signed APK or AAB bundle\n3. Upload to Google Play Console\n4. Configure store listing and submit for review\n\n## Debugging\n\n### Web Preview\n- Use browser dev tools for debugging web components\n- Test responsive design and touch interactions\n- Simulate mobile viewport and device capabilities\n\n### Native Debugging\n- Use native IDE debuggers (Xcode/Android Studio)\n- Monitor native console logs\n- Test device-specific features and permissions\n\n### Hybrid Debugging\n- Use Chrome DevTools for Android debugging\n- Use Safari Web Inspector for iOS debugging  \n- Debug JavaScript in native context\n\n## Troubleshooting\n\n### Common Issues\n1. **Build Failures**: Ensure native development tools are properly installed\n2. **Permission Denied**: Check capacitor.config.ts plugin permissions\n3. **Live Reload Issues**: Verify network connectivity and firewall settings\n4. **Platform Sync Errors**: Clean and rebuild: `npx cap clean && npx cap sync`\n\n### Reset Native Platforms\n```bash\n# Remove platforms\nnpx cap clean\n\n# Re-add platforms  \nnpx cap add ios\nnpx cap add android\n\n# Sync again\nnpx cap sync\n```","size_bytes":4875},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nToyResaleWizard is a Progressive Web Application (PWA) that uses AI to analyze toys through camera capture or photo upload, providing pricing estimates and automated marketplace listing capabilities. The application is built with a React TypeScript frontend and Express.js backend, featuring a mobile-first design that can operate in both demo mode with mock services and production mode with real integrations.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Library**: Shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom CSS variables for theming\n- **State Management**: TanStack React Query for server state and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **PWA Features**: Service worker for offline functionality and push notifications\n- **Mobile App**: Capacitor framework for native iOS and Android apps with native camera and push notification integration\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework using TypeScript\n- **Development**: TSX for TypeScript execution in development\n- **Storage**: Dual storage system with in-memory storage for development and PostgreSQL for production\n- **File Uploads**: Multer middleware for handling image uploads with validation\n- **Real-time Communication**: WebSocket server for live updates during toy analysis and listing processes\n\n## Data Layer\n- **Database**: PostgreSQL configured through Drizzle ORM\n- **Schema**: User accounts, toys catalog, scan history, marketplace listings, and marketplace connections\n- **Query Builder**: Drizzle ORM with Zod schema validation\n- **Migrations**: Automated database migrations through Drizzle Kit\n\n## Service Architecture\n- **AI Analysis Service**: Configurable between mock responses (demo mode) and OpenAI GPT-4 Vision API\n- **Marketplace Integration**: Mock and real implementations for eBay, Amazon, and WordPress\n- **Mock Services**: Comprehensive mock implementations for all external services to enable offline development and demos\n\n## Authentication & Security\n- **Session Management**: Connect-pg-simple for PostgreSQL-based session storage\n- **File Security**: Restricted file system access and upload validation\n- **CORS**: Cross-origin request handling for development and production environments\n\n# External Dependencies\n\n## Required Production Services\n- **Database**: PostgreSQL with Neon Database (@neondatabase/serverless)\n- **AI Vision**: OpenAI GPT-4 Vision API for toy identification and analysis\n- **Marketplace APIs**: eBay Developer API, Amazon MWS/SP-API for automated listings\n- **Email Service**: SMTP provider (Gmail configured) for notifications\n- **Payment Processing**: Stripe for premium features\n\n## Development Tools\n- **Build System**: Vite with React plugin and runtime error overlay\n- **TypeScript**: Full type safety across frontend, backend, and shared schemas\n- **Code Quality**: ESBuild for production bundling\n- **Development Experience**: Hot module replacement, Replit integration plugins\n\n## UI Component Libraries\n- **Base Components**: Radix UI primitives for accessibility and behavior\n- **Icons**: Font Awesome for consistent iconography\n- **Styling Utilities**: Class Variance Authority for component variants\n- **Date Handling**: Date-fns for date manipulation and formatting\n\n## Real-time Features\n- **WebSocket**: Native WebSocket implementation for real-time scan status updates\n- **Camera API**: Browser MediaDevices API for device camera access (web) and Capacitor Camera plugin for native apps\n- **File Handling**: Native File API for image upload and processing\n- **Push Notifications**: Native push notification support for iOS and Android apps\n- **Cross-Platform**: Single codebase supporting web, iOS, and Android with platform-specific optimizations\n\n## Mobile App Features\n- **Native Camera Integration**: Direct access to device camera with high-quality photo capture\n- **Photo Gallery Access**: Select and upload existing photos from device gallery\n- **Push Notifications**: Real-time notifications for scan completion and marketplace status updates\n- **Native Navigation**: Mobile-optimized bottom tab navigation and touch interactions\n- **Offline Support**: Works without internet connection using cached data and local storage\n- **Platform Integration**: Follows iOS and Android design guidelines and user experience patterns","size_bytes":4543},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n          50: \"var(--primary-50)\",\n          500: \"var(--primary-500)\",\n          600: \"var(--primary-600)\",\n          700: \"var(--primary-700)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n          500: \"var(--secondary-500)\",\n          600: \"var(--secondary-600)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2555},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport express from \"express\";\nimport { createServer, type Server } from \"http\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { storage } from \"./storage\";\nimport { createAIService } from \"./services/ai\";\nimport { createMarketplaceService } from \"./services/marketplace\";\nimport { initializeWebSocketService, getWebSocketService } from \"./services/websocket\";\nimport { insertScanSchema, insertListingSchema, insertMarketplaceConnectionSchema } from \"@shared/schema\";\n\n// Configure multer for file uploads\nconst uploadDir = path.join(process.cwd(), 'uploads');\nif (!fs.existsSync(uploadDir)) {\n  fs.mkdirSync(uploadDir, { recursive: true });\n}\n\nconst upload = multer({\n  dest: uploadDir,\n  limits: { fileSize: 10 * 1024 * 1024 }, // 10MB limit\n  fileFilter: (req, file, cb) => {\n    if (file.mimetype.startsWith('image/')) {\n      cb(null, true);\n    } else {\n      cb(new Error('Only image files are allowed'));\n    }\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n  \n  // Initialize services\n  const aiService = createAIService();\n  const marketplaceService = createMarketplaceService();\n  const wsService = initializeWebSocketService(httpServer);\n\n  // Health check endpoint\n  app.get('/health', (req, res) => {\n    res.json({\n      status: 'healthy',\n      version: '1.0.0',\n      mock_mode: {\n        ai_vision: process.env.USE_MOCK_AI !== 'false',\n        marketplace: process.env.USE_MOCK_MARKETPLACE !== 'false',\n        email: process.env.USE_MOCK_EMAIL !== 'false',\n        payments: process.env.USE_MOCK_PAYMENTS !== 'false'\n      }\n    });\n  });\n\n  // Scan endpoints\n  app.post('/api/v1/scans/analyze', upload.single('image'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: 'No image file provided' });\n      }\n\n      const userId = req.headers['x-user-id'] as string || 'demo-user';\n      const imageUrl = `/uploads/${req.file.filename}`;\n\n      // Create initial scan record\n      const scan = await storage.createScan({\n        userId,\n        imageUrl,\n        status: 'processing'\n      });\n\n      // Send immediate response with scan ID\n      res.json({ scanId: scan.id, status: 'processing' });\n\n      // Process AI analysis asynchronously\n      try {\n        wsService.sendScanUpdate(userId, scan.id, 'analyzing');\n        \n        const analysis = await aiService.analyzeToy(imageUrl);\n        \n        // Update scan with results\n        const updatedScan = await storage.updateScan(scan.id, {\n          status: 'completed',\n          aiAnalysis: analysis,\n          estimatedPriceMin: analysis.estimatedPriceMin.toString(),\n          estimatedPriceMax: analysis.estimatedPriceMax.toString()\n        });\n\n        // Create toy record\n        await storage.createToy({\n          name: analysis.toyName,\n          brand: analysis.brand,\n          category: analysis.category,\n          condition: analysis.condition,\n          description: analysis.description,\n          imageUrl,\n          aiAnalysis: analysis\n        });\n\n        wsService.sendScanUpdate(userId, scan.id, 'completed', updatedScan);\n      } catch (error) {\n        console.error('AI analysis failed:', error);\n        await storage.updateScan(scan.id, { status: 'failed' });\n        wsService.sendScanUpdate(userId, scan.id, 'failed', { error: error.message });\n      }\n    } catch (error) {\n      console.error('Scan creation failed:', error);\n      res.status(500).json({ error: 'Failed to create scan' });\n    }\n  });\n\n  app.get('/api/v1/scans', async (req, res) => {\n    try {\n      const userId = req.headers['x-user-id'] as string || 'demo-user';\n      const scans = await storage.getScansByUser(userId);\n      res.json(scans);\n    } catch (error) {\n      console.error('Failed to fetch scans:', error);\n      res.status(500).json({ error: 'Failed to fetch scans' });\n    }\n  });\n\n  app.get('/api/v1/scans/:id', async (req, res) => {\n    try {\n      const scan = await storage.getScan(req.params.id);\n      if (!scan) {\n        return res.status(404).json({ error: 'Scan not found' });\n      }\n      res.json(scan);\n    } catch (error) {\n      console.error('Failed to fetch scan:', error);\n      res.status(500).json({ error: 'Failed to fetch scan' });\n    }\n  });\n\n  // Listing endpoints\n  app.post('/api/v1/listings', async (req, res) => {\n    try {\n      const listingData = insertListingSchema.parse(req.body);\n      const listing = await storage.createListing(listingData);\n\n      // If auto-list is enabled, create marketplace listing\n      if (req.body.autoList && req.body.marketplace) {\n        try {\n          const marketplaceListing = await marketplaceService.createListing(\n            req.body.marketplace,\n            {\n              title: listing.title,\n              description: listing.description || '',\n              price: parseFloat(listing.price),\n              imageUrl: req.body.imageUrl || ''\n            }\n          );\n\n          await storage.updateListing(listing.id, {\n            marketplaceListingId: marketplaceListing.id,\n            status: 'active',\n            listedAt: new Date()\n          });\n\n          const userId = req.headers['x-user-id'] as string || 'demo-user';\n          getWebSocketService().sendListingUpdate(userId, listing.id, 'listed', marketplaceListing);\n        } catch (error) {\n          console.error('Marketplace listing failed:', error);\n        }\n      }\n\n      res.json(listing);\n    } catch (error) {\n      console.error('Failed to create listing:', error);\n      res.status(500).json({ error: 'Failed to create listing' });\n    }\n  });\n\n  app.get('/api/v1/listings', async (req, res) => {\n    try {\n      const userId = req.headers['x-user-id'] as string || 'demo-user';\n      const listings = await storage.getListingsByUser(userId);\n      res.json(listings);\n    } catch (error) {\n      console.error('Failed to fetch listings:', error);\n      res.status(500).json({ error: 'Failed to fetch listings' });\n    }\n  });\n\n  app.get('/api/v1/listings/scan/:scanId', async (req, res) => {\n    try {\n      const listings = await storage.getListingsByScan(req.params.scanId);\n      res.json(listings);\n    } catch (error) {\n      console.error('Failed to fetch listings:', error);\n      res.status(500).json({ error: 'Failed to fetch listings' });\n    }\n  });\n\n  // Marketplace connection endpoints\n  app.get('/api/v1/marketplace/connections', async (req, res) => {\n    try {\n      const userId = req.headers['x-user-id'] as string || 'demo-user';\n      const connections = await storage.getMarketplaceConnections(userId);\n      \n      // Return status for all supported marketplaces\n      const marketplaces = ['ebay', 'amazon', 'wordpress'];\n      const status = marketplaces.map(marketplace => {\n        const connection = connections.find(c => c.marketplace === marketplace);\n        return {\n          marketplace,\n          connected: connection?.isConnected || false,\n          lastUpdated: connection?.updatedAt\n        };\n      });\n      \n      res.json(status);\n    } catch (error) {\n      console.error('Failed to fetch marketplace connections:', error);\n      res.status(500).json({ error: 'Failed to fetch marketplace connections' });\n    }\n  });\n\n  app.post('/api/v1/marketplace/connect', async (req, res) => {\n    try {\n      const connectionData = insertMarketplaceConnectionSchema.parse(req.body);\n      const userId = req.headers['x-user-id'] as string || 'demo-user';\n      \n      const existingConnection = await storage.getMarketplaceConnection(userId, connectionData.marketplace);\n      \n      if (existingConnection) {\n        const updated = await storage.updateMarketplaceConnection(existingConnection.id, {\n          isConnected: true,\n          ...connectionData\n        });\n        res.json(updated);\n      } else {\n        const connection = await storage.createMarketplaceConnection({\n          ...connectionData,\n          userId,\n          isConnected: true\n        });\n        res.json(connection);\n      }\n    } catch (error) {\n      console.error('Failed to connect marketplace:', error);\n      res.status(500).json({ error: 'Failed to connect marketplace' });\n    }\n  });\n\n  // Serve uploaded images\n  app.use('/uploads', express.static(uploadDir));\n\n  return httpServer;\n}\n","size_bytes":8370},"server/storage.ts":{"content":"import { type User, type InsertUser, type Toy, type InsertToy, type Scan, type InsertScan, type Listing, type InsertListing, type MarketplaceConnection, type InsertMarketplaceConnection } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Toys\n  getToy(id: string): Promise<Toy | undefined>;\n  createToy(toy: InsertToy): Promise<Toy>;\n\n  // Scans\n  getScan(id: string): Promise<Scan | undefined>;\n  getScansByUser(userId: string): Promise<Scan[]>;\n  createScan(scan: InsertScan): Promise<Scan>;\n  updateScan(id: string, updates: Partial<Scan>): Promise<Scan | undefined>;\n\n  // Listings\n  getListing(id: string): Promise<Listing | undefined>;\n  getListingsByScan(scanId: string): Promise<Listing[]>;\n  getListingsByUser(userId: string): Promise<Listing[]>;\n  createListing(listing: InsertListing): Promise<Listing>;\n  updateListing(id: string, updates: Partial<Listing>): Promise<Listing | undefined>;\n\n  // Marketplace Connections\n  getMarketplaceConnection(userId: string, marketplace: string): Promise<MarketplaceConnection | undefined>;\n  getMarketplaceConnections(userId: string): Promise<MarketplaceConnection[]>;\n  createMarketplaceConnection(connection: InsertMarketplaceConnection): Promise<MarketplaceConnection>;\n  updateMarketplaceConnection(id: string, updates: Partial<MarketplaceConnection>): Promise<MarketplaceConnection | undefined>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private toys: Map<string, Toy> = new Map();\n  private scans: Map<string, Scan> = new Map();\n  private listings: Map<string, Listing> = new Map();\n  private marketplaceConnections: Map<string, MarketplaceConnection> = new Map();\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id, \n      createdAt: new Date() \n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getToy(id: string): Promise<Toy | undefined> {\n    return this.toys.get(id);\n  }\n\n  async createToy(insertToy: InsertToy): Promise<Toy> {\n    const id = randomUUID();\n    const toy: Toy = { \n      ...insertToy, \n      id, \n      createdAt: new Date() \n    };\n    this.toys.set(id, toy);\n    return toy;\n  }\n\n  async getScan(id: string): Promise<Scan | undefined> {\n    return this.scans.get(id);\n  }\n\n  async getScansByUser(userId: string): Promise<Scan[]> {\n    return Array.from(this.scans.values())\n      .filter(scan => scan.userId === userId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async createScan(insertScan: InsertScan): Promise<Scan> {\n    const id = randomUUID();\n    const now = new Date();\n    const scan: Scan = { \n      ...insertScan, \n      id, \n      createdAt: now,\n      updatedAt: now\n    };\n    this.scans.set(id, scan);\n    return scan;\n  }\n\n  async updateScan(id: string, updates: Partial<Scan>): Promise<Scan | undefined> {\n    const scan = this.scans.get(id);\n    if (!scan) return undefined;\n    \n    const updatedScan: Scan = { \n      ...scan, \n      ...updates, \n      updatedAt: new Date() \n    };\n    this.scans.set(id, updatedScan);\n    return updatedScan;\n  }\n\n  async getListing(id: string): Promise<Listing | undefined> {\n    return this.listings.get(id);\n  }\n\n  async getListingsByScan(scanId: string): Promise<Listing[]> {\n    return Array.from(this.listings.values()).filter(listing => listing.scanId === scanId);\n  }\n\n  async getListingsByUser(userId: string): Promise<Listing[]> {\n    const userScans = await this.getScansByUser(userId);\n    const scanIds = new Set(userScans.map(scan => scan.id));\n    return Array.from(this.listings.values())\n      .filter(listing => scanIds.has(listing.scanId))\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async createListing(insertListing: InsertListing): Promise<Listing> {\n    const id = randomUUID();\n    const now = new Date();\n    const listing: Listing = { \n      ...insertListing, \n      id, \n      createdAt: now,\n      updatedAt: now\n    };\n    this.listings.set(id, listing);\n    return listing;\n  }\n\n  async updateListing(id: string, updates: Partial<Listing>): Promise<Listing | undefined> {\n    const listing = this.listings.get(id);\n    if (!listing) return undefined;\n    \n    const updatedListing: Listing = { \n      ...listing, \n      ...updates, \n      updatedAt: new Date() \n    };\n    this.listings.set(id, updatedListing);\n    return updatedListing;\n  }\n\n  async getMarketplaceConnection(userId: string, marketplace: string): Promise<MarketplaceConnection | undefined> {\n    return Array.from(this.marketplaceConnections.values())\n      .find(conn => conn.userId === userId && conn.marketplace === marketplace);\n  }\n\n  async getMarketplaceConnections(userId: string): Promise<MarketplaceConnection[]> {\n    return Array.from(this.marketplaceConnections.values())\n      .filter(conn => conn.userId === userId);\n  }\n\n  async createMarketplaceConnection(insertConnection: InsertMarketplaceConnection): Promise<MarketplaceConnection> {\n    const id = randomUUID();\n    const now = new Date();\n    const connection: MarketplaceConnection = { \n      ...insertConnection, \n      id, \n      createdAt: now,\n      updatedAt: now\n    };\n    this.marketplaceConnections.set(id, connection);\n    return connection;\n  }\n\n  async updateMarketplaceConnection(id: string, updates: Partial<MarketplaceConnection>): Promise<MarketplaceConnection | undefined> {\n    const connection = this.marketplaceConnections.get(id);\n    if (!connection) return undefined;\n    \n    const updatedConnection: MarketplaceConnection = { \n      ...connection, \n      ...updates, \n      updatedAt: new Date() \n    };\n    this.marketplaceConnections.set(id, updatedConnection);\n    return updatedConnection;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":6284},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, decimal, jsonb, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const toys = pgTable(\"toys\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  brand: text(\"brand\"),\n  category: text(\"category\"),\n  description: text(\"description\"),\n  condition: text(\"condition\").notNull(), // 'mint', 'excellent', 'good', 'fair', 'poor'\n  imageUrl: text(\"image_url\").notNull(),\n  aiAnalysis: jsonb(\"ai_analysis\"), // AI analysis results\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const scans = pgTable(\"scans\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  toyId: varchar(\"toy_id\").references(() => toys.id),\n  imageUrl: text(\"image_url\").notNull(),\n  status: text(\"status\").notNull().default('processing'), // 'processing', 'completed', 'failed'\n  aiAnalysis: jsonb(\"ai_analysis\"),\n  estimatedPriceMin: decimal(\"estimated_price_min\", { precision: 10, scale: 2 }),\n  estimatedPriceMax: decimal(\"estimated_price_max\", { precision: 10, scale: 2 }),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const listings = pgTable(\"listings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  scanId: varchar(\"scan_id\").references(() => scans.id).notNull(),\n  marketplace: text(\"marketplace\").notNull(), // 'ebay', 'amazon', 'wordpress'\n  marketplaceListingId: text(\"marketplace_listing_id\"),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  status: text(\"status\").notNull().default('draft'), // 'draft', 'active', 'sold', 'cancelled'\n  listedAt: timestamp(\"listed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const marketplaceConnections = pgTable(\"marketplace_connections\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  marketplace: text(\"marketplace\").notNull(),\n  isConnected: boolean(\"is_connected\").default(false).notNull(),\n  accessToken: text(\"access_token\"),\n  refreshToken: text(\"refresh_token\"),\n  expiresAt: timestamp(\"expires_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertToySchema = createInsertSchema(toys).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertScanSchema = createInsertSchema(scans).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertListingSchema = createInsertSchema(listings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMarketplaceConnectionSchema = createInsertSchema(marketplaceConnections).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Toy = typeof toys.$inferSelect;\nexport type InsertToy = z.infer<typeof insertToySchema>;\n\nexport type Scan = typeof scans.$inferSelect;\nexport type InsertScan = z.infer<typeof insertScanSchema>;\n\nexport type Listing = typeof listings.$inferSelect;\nexport type InsertListing = z.infer<typeof insertListingSchema>;\n\nexport type MarketplaceConnection = typeof marketplaceConnections.$inferSelect;\nexport type InsertMarketplaceConnection = z.infer<typeof insertMarketplaceConnectionSchema>;\n","size_bytes":4186},"client/public/sw.js":{"content":"const CACHE_NAME = 'toyresalewizard-v1';\nconst urlsToCache = [\n  '/',\n  '/manifest.json',\n  '/icon-192.png',\n  '/icon-512.png'\n];\n\n// Install event\nself.addEventListener('install', (event) => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then((cache) => {\n        console.log('Opened cache');\n        return cache.addAll(urlsToCache);\n      })\n  );\n});\n\n// Fetch event\nself.addEventListener('fetch', (event) => {\n  event.respondWith(\n    caches.match(event.request)\n      .then((response) => {\n        // Return cached version or fetch from network\n        return response || fetch(event.request);\n      }\n    )\n  );\n});\n\n// Activate event\nself.addEventListener('activate', (event) => {\n  event.waitUntil(\n    caches.keys().then((cacheNames) => {\n      return Promise.all(\n        cacheNames.map((cacheName) => {\n          if (cacheName !== CACHE_NAME) {\n            console.log('Deleting old cache:', cacheName);\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n});\n\n// Push notification handling\nself.addEventListener('push', (event) => {\n  const options = {\n    body: event.data ? event.data.text() : 'New notification from ToyResaleWizard',\n    icon: '/icon-192.png',\n    badge: '/icon-192.png',\n    vibrate: [100, 50, 100],\n    data: {\n      dateOfArrival: Date.now(),\n      primaryKey: 1\n    },\n    actions: [\n      {\n        action: 'explore',\n        title: 'View Details',\n        icon: '/icon-192.png'\n      },\n      {\n        action: 'close',\n        title: 'Close',\n        icon: '/icon-192.png'\n      }\n    ]\n  };\n\n  event.waitUntil(\n    self.registration.showNotification('ToyResaleWizard', options)\n  );\n});\n\n// Notification click handling\nself.addEventListener('notificationclick', (event) => {\n  event.notification.close();\n\n  if (event.action === 'explore') {\n    event.waitUntil(\n      clients.openWindow('/')\n    );\n  }\n});\n","size_bytes":1894},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { PWAInstallBanner } from \"@/components/pwa-install-banner\";\nimport { LoadingOverlay } from \"@/components/loading-overlay\";\nimport Home from \"@/pages/home\";\nimport Scans from \"@/pages/scans\";\nimport Listings from \"@/pages/listings\";\nimport Profile from \"@/pages/profile\";\nimport NotFound from \"@/pages/not-found\";\nimport { useState, useEffect } from \"react\";\nimport { useNativeFeatures } from \"@/hooks/use-native-features\";\nimport { App as CapacitorApp } from '@capacitor/app';\nimport { SplashScreen } from '@capacitor/splash-screen';\nimport { StatusBar, Style } from '@capacitor/status-bar';\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/scans\" component={Scans} />\n      <Route path=\"/listings\" component={Listings} />\n      <Route path=\"/profile\" component={Profile} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadingMessage, setLoadingMessage] = useState(\"\");\n  const { isNative } = useNativeFeatures();\n\n  useEffect(() => {\n    const initializeMobileApp = async () => {\n      if (isNative) {\n        try {\n          // Configure status bar for mobile apps\n          await StatusBar.setStyle({ style: Style.Default });\n          \n          // Hide splash screen after initialization\n          await SplashScreen.hide();\n          \n          // Set up app state listeners\n          CapacitorApp.addListener('appStateChange', ({ isActive }) => {\n            console.log('App state changed. Is active?', isActive);\n          });\n          \n          CapacitorApp.addListener('backButton', ({ canGoBack }) => {\n            if (!canGoBack) {\n              CapacitorApp.exitApp();\n            } else {\n              window.history.back();\n            }\n          });\n          \n        } catch (error) {\n          console.error('Mobile app initialization error:', error);\n        }\n      }\n    };\n\n    initializeMobileApp();\n    \n    return () => {\n      // Cleanup listeners\n      if (isNative) {\n        CapacitorApp.removeAllListeners();\n      }\n    };\n  }, [isNative]);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen bg-gray-50\">\n          {/* Only show PWA banner on web, not in native app */}\n          {!isNative && <PWAInstallBanner />}\n          <Router />\n          <LoadingOverlay \n            isVisible={isLoading} \n            message={loadingMessage} \n          />\n          <Toaster />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2893},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(217.2 91.2% 59.8%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 40% 96%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215.4 16.3% 46.9%);\n  --accent: hsl(210 40% 96%);\n  --accent-foreground: hsl(210 25% 7.8431%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(214.3 31.8% 91.4%);\n  --input: hsl(214.3 31.8% 91.4%);\n  --ring: hsl(217.2 91.2% 59.8%);\n  --chart-1: hsl(217.2 91.2% 59.8%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --font-sans: 'Inter', 'Open Sans', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --spacing: 0.25rem;\n  \n  /* Custom colors from design */\n  --primary-50: hsl(214 100% 97%);\n  --primary-500: hsl(217.2 91.2% 59.8%);\n  --primary-600: hsl(224 76% 48%);\n  --primary-700: hsl(226 71% 40%);\n  --secondary-500: hsl(187 85% 43%);\n  --secondary-600: hsl(187 85% 35%);\n}\n\n.dark {\n  --background: hsl(222.2 84% 4.9%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222.2 84% 4.9%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(222.2 84% 4.9%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(217.2 91.2% 59.8%);\n  --primary-foreground: hsl(222.2 84% 4.9%);\n  --secondary: hsl(217.2 32.6% 17.5%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(217.2 32.6% 17.5%);\n  --muted-foreground: hsl(215 20.2% 65.1%);\n  --accent: hsl(217.2 32.6% 17.5%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(0 62.8% 30.6%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(217.2 32.6% 17.5%);\n  --input: hsl(217.2 32.6% 17.5%);\n  --ring: hsl(217.2 91.2% 59.8%);\n  --chart-1: hsl(217.2 91.2% 59.8%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-gray-50 text-foreground;\n    font-family: 'Inter', var(--font-sans);\n  }\n}\n\n@layer utilities {\n  .text-balance {\n    text-wrap: balance;\n  }\n}\n\n/* Custom styles for mobile optimization */\n.touch-manipulation {\n  touch-action: manipulation;\n}\n\n.safe-area-top {\n  padding-top: env(safe-area-inset-top);\n}\n\n.safe-area-bottom {\n  padding-bottom: env(safe-area-inset-bottom);\n}\n\n/* PWA specific styles */\n.pwa-banner {\n  background: linear-gradient(135deg, var(--primary-600), var(--primary-700));\n}\n\n/* Loading animation for scan processing */\n@keyframes pulse-scan {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.5;\n  }\n}\n\n.pulse-scan {\n  animation: pulse-scan 2s ease-in-out infinite;\n}\n\n/* WebSocket connection indicator */\n.ws-connected {\n  background-color: hsl(142 76% 36%);\n}\n\n.ws-disconnected {\n  background-color: hsl(0 84% 60%);\n}\n\n.ws-connecting {\n  background-color: hsl(38 92% 50%);\n}\n","size_bytes":3474},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/ai.ts":{"content":"export interface AIAnalysisResult {\n  toyName: string;\n  brand?: string;\n  category: string;\n  condition: 'mint' | 'excellent' | 'good' | 'fair' | 'poor';\n  description: string;\n  estimatedPriceMin: number;\n  estimatedPriceMax: number;\n  confidence: number;\n}\n\nexport interface IAIService {\n  analyzeToy(imageUrl: string): Promise<AIAnalysisResult>;\n}\n\nexport class MockAIService implements IAIService {\n  async analyzeToy(imageUrl: string): Promise<AIAnalysisResult> {\n    // Simulate processing delay\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    // Mock realistic toy analysis results\n    const mockResults = [\n      {\n        toyName: \"LEGO Creator Expert Big Ben\",\n        brand: \"LEGO\",\n        category: \"Building Sets\",\n        condition: \"good\" as const,\n        description: \"Large architectural building set with detailed Big Ben clock tower replica. Includes over 4,000 pieces.\",\n        estimatedPriceMin: 220,\n        estimatedPriceMax: 280,\n        confidence: 0.92\n      },\n      {\n        toyName: \"Vintage Barbie Doll\",\n        brand: \"Mattel\",\n        category: \"Dolls\",\n        condition: \"excellent\" as const,\n        description: \"Classic Barbie doll from the 1990s in original packaging. Blonde hair, pink dress.\",\n        estimatedPriceMin: 45,\n        estimatedPriceMax: 85,\n        confidence: 0.87\n      },\n      {\n        toyName: \"Hot Wheels Cars Set\",\n        brand: \"Hot Wheels\",\n        category: \"Die-cast Cars\",\n        condition: \"good\" as const,\n        description: \"Collection of vintage Hot Wheels cars from various years. Some wear on paint.\",\n        estimatedPriceMin: 15,\n        estimatedPriceMax: 35,\n        confidence: 0.78\n      }\n    ];\n    \n    return mockResults[Math.floor(Math.random() * mockResults.length)];\n  }\n}\n\nexport class OpenAIVisionService implements IAIService {\n  private apiKey: string;\n  \n  constructor(apiKey: string) {\n    this.apiKey = apiKey;\n  }\n  \n  async analyzeToy(imageUrl: string): Promise<AIAnalysisResult> {\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${this.apiKey}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        model: 'gpt-4-vision-preview',\n        messages: [\n          {\n            role: 'user',\n            content: [\n              {\n                type: 'text',\n                text: 'Analyze this toy image and provide: toy name, brand, category, condition (mint/excellent/good/fair/poor), description, and estimated resale price range in USD. Return as JSON with fields: toyName, brand, category, condition, description, estimatedPriceMin, estimatedPriceMax, confidence (0-1).'\n              },\n              {\n                type: 'image_url',\n                image_url: { url: imageUrl }\n              }\n            ]\n          }\n        ],\n        max_tokens: 500\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`OpenAI API error: ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    const content = data.choices[0]?.message?.content;\n    \n    try {\n      return JSON.parse(content);\n    } catch (error) {\n      throw new Error('Failed to parse AI analysis response');\n    }\n  }\n}\n\n// Factory function\nexport function createAIService(): IAIService {\n  const useMock = process.env.USE_MOCK_AI !== 'false';\n  const openaiApiKey = process.env.OPENAI_API_KEY;\n  \n  if (useMock || !openaiApiKey) {\n    console.log('Using mock AI service');\n    return new MockAIService();\n  }\n  \n  console.log('Using OpenAI Vision service');\n  return new OpenAIVisionService(openaiApiKey);\n}\n","size_bytes":3683},"server/services/marketplace.ts":{"content":"export interface MarketplaceListing {\n  id: string;\n  title: string;\n  description: string;\n  price: number;\n  imageUrl: string;\n  url: string;\n}\n\nexport interface IMarketplaceService {\n  createListing(marketplace: string, listing: Omit<MarketplaceListing, 'id' | 'url'>): Promise<MarketplaceListing>;\n  updateListing(marketplace: string, listingId: string, updates: Partial<MarketplaceListing>): Promise<MarketplaceListing>;\n  deleteListing(marketplace: string, listingId: string): Promise<void>;\n  getListingStatus(marketplace: string, listingId: string): Promise<string>;\n}\n\nexport class MockMarketplaceService implements IMarketplaceService {\n  async createListing(marketplace: string, listing: Omit<MarketplaceListing, 'id' | 'url'>): Promise<MarketplaceListing> {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    \n    const mockId = `mock_${marketplace}_${Date.now()}`;\n    const mockUrl = `https://${marketplace}.com/item/${mockId}`;\n    \n    console.log(`MOCK ${marketplace.toUpperCase()} LISTING CREATED:`, {\n      id: mockId,\n      title: listing.title,\n      price: listing.price,\n      url: mockUrl\n    });\n    \n    return {\n      ...listing,\n      id: mockId,\n      url: mockUrl\n    };\n  }\n\n  async updateListing(marketplace: string, listingId: string, updates: Partial<MarketplaceListing>): Promise<MarketplaceListing> {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    console.log(`MOCK ${marketplace.toUpperCase()} LISTING UPDATED:`, {\n      id: listingId,\n      updates\n    });\n    \n    return {\n      id: listingId,\n      title: updates.title || 'Updated Listing',\n      description: updates.description || 'Updated description',\n      price: updates.price || 0,\n      imageUrl: updates.imageUrl || '',\n      url: `https://${marketplace}.com/item/${listingId}`\n    };\n  }\n\n  async deleteListing(marketplace: string, listingId: string): Promise<void> {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    console.log(`MOCK ${marketplace.toUpperCase()} LISTING DELETED:`, listingId);\n  }\n\n  async getListingStatus(marketplace: string, listingId: string): Promise<string> {\n    const statuses = ['active', 'sold', 'pending', 'cancelled'];\n    return statuses[Math.floor(Math.random() * statuses.length)];\n  }\n}\n\nexport class LiveMarketplaceService implements IMarketplaceService {\n  private ebayApiKey?: string;\n  private amazonApiKey?: string;\n  \n  constructor(ebayApiKey?: string, amazonApiKey?: string) {\n    this.ebayApiKey = ebayApiKey;\n    this.amazonApiKey = amazonApiKey;\n  }\n\n  async createListing(marketplace: string, listing: Omit<MarketplaceListing, 'id' | 'url'>): Promise<MarketplaceListing> {\n    switch (marketplace.toLowerCase()) {\n      case 'ebay':\n        return this.createEbayListing(listing);\n      case 'amazon':\n        return this.createAmazonListing(listing);\n      default:\n        throw new Error(`Unsupported marketplace: ${marketplace}`);\n    }\n  }\n\n  private async createEbayListing(listing: Omit<MarketplaceListing, 'id' | 'url'>): Promise<MarketplaceListing> {\n    if (!this.ebayApiKey) {\n      throw new Error('eBay API key not configured');\n    }\n    \n    // Implementation would go here for actual eBay API\n    throw new Error('eBay integration not yet implemented');\n  }\n\n  private async createAmazonListing(listing: Omit<MarketplaceListing, 'id' | 'url'>): Promise<MarketplaceListing> {\n    if (!this.amazonApiKey) {\n      throw new Error('Amazon API key not configured');\n    }\n    \n    // Implementation would go here for actual Amazon API\n    throw new Error('Amazon integration not yet implemented');\n  }\n\n  async updateListing(marketplace: string, listingId: string, updates: Partial<MarketplaceListing>): Promise<MarketplaceListing> {\n    throw new Error('Live marketplace update not yet implemented');\n  }\n\n  async deleteListing(marketplace: string, listingId: string): Promise<void> {\n    throw new Error('Live marketplace delete not yet implemented');\n  }\n\n  async getListingStatus(marketplace: string, listingId: string): Promise<string> {\n    throw new Error('Live marketplace status check not yet implemented');\n  }\n}\n\n// Factory function\nexport function createMarketplaceService(): IMarketplaceService {\n  const useMock = process.env.USE_MOCK_MARKETPLACE !== 'false';\n  const ebayApiKey = process.env.EBAY_CLIENT_ID;\n  const amazonApiKey = process.env.AMAZON_ACCESS_KEY;\n  \n  if (useMock || (!ebayApiKey && !amazonApiKey)) {\n    console.log('Using mock marketplace service');\n    return new MockMarketplaceService();\n  }\n  \n  console.log('Using live marketplace service');\n  return new LiveMarketplaceService(ebayApiKey, amazonApiKey);\n}\n","size_bytes":4680},"server/services/websocket.ts":{"content":"import { WebSocket, WebSocketServer } from 'ws';\nimport { Server } from 'http';\n\nexport interface WebSocketMessage {\n  type: string;\n  payload: any;\n  userId?: string;\n}\n\nexport class WebSocketService {\n  private wss: WebSocketServer;\n  private clients: Map<string, Set<WebSocket>> = new Map();\n\n  constructor(server: Server) {\n    this.wss = new WebSocketServer({ \n      server,\n      path: '/ws/api' // Use a specific path to avoid conflicts with Vite's WebSocket\n    });\n    this.setupWebSocketServer();\n  }\n\n  private setupWebSocketServer() {\n    this.wss.on('connection', (ws: WebSocket, request) => {\n      console.log('WebSocket client connected');\n      \n      ws.on('message', (data: Buffer) => {\n        try {\n          const message: WebSocketMessage = JSON.parse(data.toString());\n          this.handleMessage(ws, message);\n        } catch (error) {\n          console.error('Invalid WebSocket message:', error);\n        }\n      });\n\n      ws.on('close', () => {\n        console.log('WebSocket client disconnected');\n        this.removeClient(ws);\n      });\n\n      ws.on('error', (error) => {\n        console.error('WebSocket error:', error);\n      });\n\n      // Send welcome message\n      this.sendMessage(ws, {\n        type: 'connection',\n        payload: { status: 'connected', timestamp: new Date().toISOString() }\n      });\n    });\n  }\n\n  private handleMessage(ws: WebSocket, message: WebSocketMessage) {\n    switch (message.type) {\n      case 'register':\n        if (message.userId) {\n          this.registerClient(message.userId, ws);\n        }\n        break;\n      case 'ping':\n        this.sendMessage(ws, { type: 'pong', payload: {} });\n        break;\n      default:\n        console.log('Unknown message type:', message.type);\n    }\n  }\n\n  private registerClient(userId: string, ws: WebSocket) {\n    if (!this.clients.has(userId)) {\n      this.clients.set(userId, new Set());\n    }\n    this.clients.get(userId)!.add(ws);\n    console.log(`Client registered for user: ${userId}`);\n  }\n\n  private removeClient(ws: WebSocket) {\n    this.clients.forEach((clients, userId) => {\n      if (clients.has(ws)) {\n        clients.delete(ws);\n        if (clients.size === 0) {\n          this.clients.delete(userId);\n        }\n        console.log(`Client removed for user: ${userId}`);\n      }\n    });\n  }\n\n  private sendMessage(ws: WebSocket, message: WebSocketMessage) {\n    if (ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify(message));\n    }\n  }\n\n  // Public methods for sending notifications\n  public sendToUser(userId: string, message: WebSocketMessage) {\n    const clients = this.clients.get(userId);\n    if (clients) {\n      clients.forEach(ws => {\n        this.sendMessage(ws, message);\n      });\n    }\n  }\n\n  public broadcastToAll(message: WebSocketMessage) {\n    this.wss.clients.forEach(ws => {\n      this.sendMessage(ws, message);\n    });\n  }\n\n  public sendScanUpdate(userId: string, scanId: string, status: string, data?: any) {\n    this.sendToUser(userId, {\n      type: 'scan_update',\n      payload: {\n        scanId,\n        status,\n        data,\n        timestamp: new Date().toISOString()\n      }\n    });\n  }\n\n  public sendListingUpdate(userId: string, listingId: string, status: string, data?: any) {\n    this.sendToUser(userId, {\n      type: 'listing_update',\n      payload: {\n        listingId,\n        status,\n        data,\n        timestamp: new Date().toISOString()\n      }\n    });\n  }\n}\n\nlet wsService: WebSocketService | null = null;\n\nexport function initializeWebSocketService(server: Server): WebSocketService {\n  wsService = new WebSocketService(server);\n  return wsService;\n}\n\nexport function getWebSocketService(): WebSocketService {\n  if (!wsService) {\n    throw new Error('WebSocket service not initialized');\n  }\n  return wsService;\n}\n","size_bytes":3792},"client/src/components/bottom-navigation.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { useNativeCamera } from \"@/hooks/use-native-camera\";\n\ninterface BottomNavigationProps {\n  currentPage: string;\n}\n\nexport function BottomNavigation({ currentPage }: BottomNavigationProps) {\n  const [location] = useLocation();\n  const { takePicture, isNative } = useNativeCamera();\n\n  const navItems = [\n    { \n      id: 'home',\n      path: '/',\n      icon: 'fas fa-home',\n      label: 'Home'\n    },\n    {\n      id: 'scans',\n      path: '/scans', \n      icon: 'fas fa-history',\n      label: 'Scans'\n    },\n    {\n      id: 'scan',\n      path: '#',\n      icon: 'fas fa-camera',\n      label: 'Scan',\n      isHighlighted: true\n    },\n    {\n      id: 'listings',\n      path: '/listings',\n      icon: 'fas fa-store', \n      label: 'Listings'\n    },\n    {\n      id: 'profile',\n      path: '/profile',\n      icon: 'fas fa-user',\n      label: 'Profile'\n    }\n  ];\n\n  const isActive = (itemPath: string) => {\n    if (itemPath === '/') {\n      return location === '/';\n    }\n    return location.startsWith(itemPath);\n  };\n\n  return (\n    <nav className=\"fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 z-40 safe-area-bottom\">\n      <div className=\"max-w-lg mx-auto\">\n        <div className=\"flex justify-around py-2\">\n          {navItems.map((item) => {\n            if (item.isHighlighted) {\n              return (\n                <Button\n                  key={item.id}\n                  onClick={async () => {\n                    if (isNative) {\n                      await takePicture();\n                    } else {\n                      // Fallback to camera component or file upload\n                      console.log('Web camera fallback needed');\n                    }\n                  }}\n                  className=\"flex flex-col items-center justify-center py-2 px-3 bg-primary-600 text-white rounded-lg mx-2 min-h-[60px]\"\n                  data-testid={`nav-${item.id}`}\n                >\n                  <i className={`${item.icon} text-lg`}></i>\n                  <span className=\"text-xs font-medium mt-1\">{item.label}</span>\n                </Button>\n              );\n            }\n\n            const active = isActive(item.path);\n            \n            return (\n              <Link key={item.id} href={item.path}>\n                <Button\n                  variant=\"ghost\"\n                  className={`flex flex-col items-center justify-center py-2 px-3 min-h-[60px] ${\n                    active \n                      ? 'text-primary-600' \n                      : 'text-gray-600 hover:text-primary-600'\n                  }`}\n                  data-testid={`nav-${item.id}`}\n                >\n                  <i className={`${item.icon} text-lg`}></i>\n                  <span className=\"text-xs font-medium mt-1\">{item.label}</span>\n                </Button>\n              </Link>\n            );\n          })}\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":2984},"client/src/components/camera-capture.tsx":{"content":"import { useState, useRef, useCallback } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { useCamera } from \"@/hooks/use-camera\";\n\ninterface CameraCaptureProps {\n  onClose: () => void;\n  onCapture: (file: File) => void;\n}\n\nexport function CameraCapture({ onClose, onCapture }: CameraCaptureProps) {\n  const [capturedImage, setCapturedImage] = useState<string | null>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  \n  const { videoRef, stream, startCamera, stopCamera, isSupported } = useCamera();\n\n  const handleCapture = useCallback(() => {\n    if (!videoRef.current || !canvasRef.current) return;\n\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    if (!ctx) return;\n\n    // Set canvas dimensions to match video\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n\n    // Draw current video frame to canvas\n    ctx.drawImage(video, 0, 0);\n\n    // Convert canvas to blob and create file\n    canvas.toBlob((blob) => {\n      if (blob) {\n        const file = new File([blob], `toy-scan-${Date.now()}.jpg`, {\n          type: 'image/jpeg'\n        });\n        onCapture(file);\n        setCapturedImage(canvas.toDataURL());\n        stopCamera();\n      }\n    }, 'image/jpeg', 0.8);\n  }, [onCapture, stopCamera]);\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      onCapture(file);\n      // Create preview\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setCapturedImage(e.target?.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleRetake = () => {\n    setCapturedImage(null);\n    startCamera();\n  };\n\n  if (!isSupported) {\n    return (\n      <div className=\"fixed inset-0 bg-black z-50 flex items-center justify-center\">\n        <Card className=\"max-w-sm mx-4 p-6 text-center\">\n          <i className=\"fas fa-camera text-gray-400 text-4xl mb-4\"></i>\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Camera Not Supported</h3>\n          <p className=\"text-gray-600 mb-4\">\n            Your device doesn't support camera access. Please upload an image instead.\n          </p>\n          <div className=\"space-y-2\">\n            <Button \n              onClick={() => fileInputRef.current?.click()}\n              className=\"w-full\"\n              data-testid=\"button-upload-file\"\n            >\n              <i className=\"fas fa-upload mr-2\"></i>\n              Upload Image\n            </Button>\n            <Button \n              variant=\"outline\" \n              onClick={onClose} \n              className=\"w-full\"\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n          </div>\n          <input\n            ref={fileInputRef}\n            type=\"file\"\n            accept=\"image/*\"\n            onChange={handleFileUpload}\n            className=\"hidden\"\n            data-testid=\"input-file-upload\"\n          />\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"fixed inset-0 bg-black z-50\">\n      <div className=\"h-full flex flex-col\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-4 text-white\">\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            onClick={onClose}\n            className=\"text-white hover:bg-white/20\"\n            data-testid=\"button-close-camera\"\n          >\n            <i className=\"fas fa-times mr-2\"></i>\n            Cancel\n          </Button>\n          <h2 className=\"font-medium\">Capture Toy</h2>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\"\n            onClick={() => fileInputRef.current?.click()}\n            className=\"text-white hover:bg-white/20\"\n            data-testid=\"button-gallery\"\n          >\n            <i className=\"fas fa-images\"></i>\n          </Button>\n        </div>\n\n        {/* Camera/Preview Area */}\n        <div className=\"flex-1 relative flex items-center justify-center\">\n          {capturedImage ? (\n            <img \n              src={capturedImage} \n              alt=\"Captured toy\" \n              className=\"max-w-full max-h-full object-contain\"\n              data-testid=\"img-captured\"\n            />\n          ) : (\n            <>\n              <video\n                ref={videoRef}\n                autoPlay\n                playsInline\n                muted\n                className=\"w-full h-full object-cover\"\n                data-testid=\"video-camera\"\n              />\n              {/* Camera overlay */}\n              <div className=\"absolute inset-0 flex items-center justify-center\">\n                <div className=\"border-2 border-white/50 rounded-lg w-64 h-64 relative\">\n                  <div className=\"absolute top-0 left-0 w-8 h-8 border-t-4 border-l-4 border-white rounded-tl-lg\"></div>\n                  <div className=\"absolute top-0 right-0 w-8 h-8 border-t-4 border-r-4 border-white rounded-tr-lg\"></div>\n                  <div className=\"absolute bottom-0 left-0 w-8 h-8 border-b-4 border-l-4 border-white rounded-bl-lg\"></div>\n                  <div className=\"absolute bottom-0 right-0 w-8 h-8 border-b-4 border-r-4 border-white rounded-br-lg\"></div>\n                </div>\n              </div>\n            </>\n          )}\n        </div>\n\n        {/* Controls */}\n        <div className=\"p-6 space-y-4\">\n          {capturedImage ? (\n            <div className=\"flex space-x-4\">\n              <Button \n                variant=\"outline\" \n                onClick={handleRetake}\n                className=\"flex-1 bg-white/20 border-white/30 text-white hover:bg-white/30\"\n                data-testid=\"button-retake\"\n              >\n                <i className=\"fas fa-redo mr-2\"></i>\n                Retake\n              </Button>\n              <Button \n                onClick={onClose}\n                className=\"flex-1 bg-primary-600 hover:bg-primary-700\"\n                data-testid=\"button-use-photo\"\n              >\n                <i className=\"fas fa-check mr-2\"></i>\n                Use Photo\n              </Button>\n            </div>\n          ) : (\n            <>\n              {/* Tip */}\n              <div className=\"text-center\">\n                <p className=\"text-white/80 text-sm\">\n                  <i className=\"fas fa-lightbulb mr-2\"></i>\n                  Position the toy clearly within the frame for best results\n                </p>\n              </div>\n              \n              {/* Capture Button */}\n              <div className=\"flex justify-center\">\n                <Button\n                  onClick={handleCapture}\n                  disabled={!stream}\n                  className=\"w-16 h-16 rounded-full bg-white text-gray-900 hover:bg-gray-100 disabled:opacity-50\"\n                  data-testid=\"button-capture\"\n                >\n                  <i className=\"fas fa-camera text-xl\"></i>\n                </Button>\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={handleFileUpload}\n        className=\"hidden\"\n        data-testid=\"input-camera-file\"\n      />\n      <canvas ref={canvasRef} className=\"hidden\" />\n    </div>\n  );\n}\n","size_bytes":7430},"client/src/components/loading-overlay.tsx":{"content":"interface LoadingOverlayProps {\n  isVisible: boolean;\n  message?: string;\n}\n\nexport function LoadingOverlay({ isVisible, message = \"Analyzing your toy...\" }: LoadingOverlayProps) {\n  if (!isVisible) {\n    return null;\n  }\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center\">\n      <div className=\"bg-white rounded-xl p-6 max-w-sm mx-4 text-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto mb-4\"></div>\n        <h4 className=\"font-medium text-gray-900 mb-2\" data-testid=\"text-loading-message\">\n          {message}\n        </h4>\n        <p className=\"text-sm text-gray-600\">This may take a few moments</p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":749},"client/src/components/pwa-install-banner.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport function PWAInstallBanner() {\n  const [showBanner, setShowBanner] = useState(false);\n  const [deferredPrompt, setDeferredPrompt] = useState<any>(null);\n\n  useEffect(() => {\n    const handler = (e: any) => {\n      e.preventDefault();\n      setDeferredPrompt(e);\n      setShowBanner(true);\n    };\n\n    window.addEventListener('beforeinstallprompt', handler);\n\n    return () => {\n      window.removeEventListener('beforeinstallprompt', handler);\n    };\n  }, []);\n\n  const handleInstall = async () => {\n    if (deferredPrompt) {\n      deferredPrompt.prompt();\n      const { outcome } = await deferredPrompt.userChoice;\n      setDeferredPrompt(null);\n      setShowBanner(false);\n    }\n  };\n\n  const handleDismiss = () => {\n    setShowBanner(false);\n  };\n\n  if (!showBanner) {\n    return null;\n  }\n\n  return (\n    <div className=\"pwa-banner text-white p-4 text-center relative\">\n      <p className=\"text-sm font-medium\">Install ToyResaleWizard for the best experience!</p>\n      <div className=\"flex justify-center space-x-2 mt-2\">\n        <Button\n          onClick={handleInstall}\n          className=\"bg-white text-primary-600 px-4 py-1 rounded-full text-sm font-medium hover:bg-gray-100\"\n          data-testid=\"button-install-app\"\n        >\n          Install App\n        </Button>\n        <Button\n          onClick={handleDismiss}\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"text-white hover:bg-white/20\"\n          data-testid=\"button-dismiss-banner\"\n        >\n          <i className=\"fas fa-times\"></i>\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1675},"client/src/components/scan-card.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { Scan } from \"@shared/schema\";\n\ninterface ScanCardProps {\n  scan: Scan;\n  showDetails?: boolean;\n}\n\nexport function ScanCard({ scan, showDetails = false }: ScanCardProps) {\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed': return 'bg-green-100 text-green-800';\n      case 'processing': return 'bg-yellow-100 text-yellow-800';\n      case 'failed': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed': return 'fas fa-check-circle text-green-500';\n      case 'processing': return 'fas fa-spinner fa-spin text-yellow-500';\n      case 'failed': return 'fas fa-exclamation-triangle text-red-500';\n      default: return 'fas fa-clock text-gray-500';\n    }\n  };\n\n  const formatTimeAgo = (date: Date) => {\n    const now = new Date();\n    const diffMs = now.getTime() - new Date(date).getTime();\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n    const diffDays = Math.floor(diffHours / 24);\n\n    if (diffDays > 0) {\n      return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;\n    } else if (diffHours > 0) {\n      return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;\n    } else {\n      return 'Less than an hour ago';\n    }\n  };\n\n  const getToyInfo = () => {\n    if (scan.aiAnalysis && typeof scan.aiAnalysis === 'object') {\n      const analysis = scan.aiAnalysis as any;\n      return {\n        name: analysis.toyName || 'Unknown Toy',\n        condition: analysis.condition || 'Unknown',\n        brand: analysis.brand\n      };\n    }\n    return {\n      name: 'Analyzing...',\n      condition: 'Pending',\n      brand: null\n    };\n  };\n\n  const toyInfo = getToyInfo();\n  const priceRange = scan.estimatedPriceMin && scan.estimatedPriceMax \n    ? `$${scan.estimatedPriceMin}-${scan.estimatedPriceMax}`\n    : scan.status === 'processing' \n    ? 'Calculating...' \n    : 'N/A';\n\n  return (\n    <Card className=\"p-4\">\n      <div className=\"flex items-center space-x-3\">\n        {/* Image */}\n        <div className=\"w-16 h-16 bg-gray-200 rounded-lg overflow-hidden flex-shrink-0\">\n          {scan.imageUrl ? (\n            <img\n              src={scan.imageUrl}\n              alt=\"Scanned toy\"\n              className=\"w-full h-full object-cover\"\n              data-testid={`img-scan-${scan.id}`}\n            />\n          ) : (\n            <div className=\"w-full h-full flex items-center justify-center\">\n              <i className=\"fas fa-image text-gray-400\"></i>\n            </div>\n          )}\n        </div>\n\n        {/* Content */}\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex-1 min-w-0\">\n              <h4 className=\"font-medium text-gray-900 truncate\" data-testid={`text-toy-name-${scan.id}`}>\n                {toyInfo.name}\n              </h4>\n              {toyInfo.brand && (\n                <p className=\"text-sm text-gray-600\" data-testid={`text-toy-brand-${scan.id}`}>\n                  {toyInfo.brand}\n                </p>\n              )}\n              <p className=\"text-sm text-gray-600\" data-testid={`text-toy-condition-${scan.id}`}>\n                {toyInfo.condition} Condition\n              </p>\n            </div>\n            <Badge className={getStatusColor(scan.status)} data-testid={`badge-status-${scan.id}`}>\n              {scan.status}\n            </Badge>\n          </div>\n\n          <div className=\"flex items-center justify-between mt-2\">\n            <span className=\"text-lg font-bold text-green-600\" data-testid={`text-price-range-${scan.id}`}>\n              {priceRange}\n            </span>\n            <span className=\"text-xs text-gray-500\" data-testid={`text-time-ago-${scan.id}`}>\n              {formatTimeAgo(scan.createdAt)}\n            </span>\n          </div>\n\n          {showDetails && (\n            <div className=\"flex items-center justify-between mt-3 pt-3 border-t border-gray-100\">\n              <div className=\"flex items-center space-x-1\">\n                <i className={getStatusIcon(scan.status)}></i>\n                <span className=\"text-sm text-gray-600\">\n                  {scan.status === 'completed' ? 'Analysis complete' :\n                   scan.status === 'processing' ? 'Analyzing...' :\n                   scan.status === 'failed' ? 'Analysis failed' : 'Pending'}\n                </span>\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\"\n                  data-testid={`button-view-details-${scan.id}`}\n                >\n                  Details\n                </Button>\n                {scan.status === 'completed' && (\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    data-testid={`button-create-listing-${scan.id}`}\n                  >\n                    List Item\n                  </Button>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":5279},"client/src/hooks/use-camera.ts":{"content":"import { useRef, useState, useEffect } from 'react';\n\nexport function useCamera() {\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [stream, setStream] = useState<MediaStream | null>(null);\n  const [isSupported, setIsSupported] = useState(true);\n\n  const startCamera = async () => {\n    try {\n      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n        setIsSupported(false);\n        return;\n      }\n\n      const mediaStream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          facingMode: 'environment', // Use back camera on mobile\n          width: { ideal: 1280 },\n          height: { ideal: 720 }\n        }\n      });\n\n      setStream(mediaStream);\n\n      if (videoRef.current) {\n        videoRef.current.srcObject = mediaStream;\n      }\n    } catch (error) {\n      console.error('Error accessing camera:', error);\n      setIsSupported(false);\n    }\n  };\n\n  const stopCamera = () => {\n    if (stream) {\n      stream.getTracks().forEach(track => track.stop());\n      setStream(null);\n    }\n\n    if (videoRef.current) {\n      videoRef.current.srcObject = null;\n    }\n  };\n\n  useEffect(() => {\n    // Check if camera is supported\n    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n      setIsSupported(false);\n    }\n\n    // Start camera automatically when hook is used\n    startCamera();\n\n    // Cleanup on unmount\n    return () => {\n      stopCamera();\n    };\n  }, []);\n\n  return {\n    videoRef,\n    stream,\n    startCamera,\n    stopCamera,\n    isSupported\n  };\n}\n","size_bytes":1545},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-native-camera.ts":{"content":"import { useState } from 'react';\nimport { Camera, CameraResultType, CameraSource, Photo } from '@capacitor/camera';\nimport { Capacitor } from '@capacitor/core';\n\nexport function useNativeCamera() {\n  const [isSupported, setIsSupported] = useState(true);\n\n  const takePicture = async (): Promise<File | null> => {\n    try {\n      if (!Capacitor.isNativePlatform()) {\n        // Fallback to web camera on web platform\n        return null;\n      }\n\n      const image: Photo = await Camera.getPhoto({\n        quality: 90,\n        allowEditing: false,\n        resultType: CameraResultType.DataUrl,\n        source: CameraSource.Camera,\n        saveToGallery: false\n      });\n\n      if (image.dataUrl) {\n        // Convert data URL to File object\n        const response = await fetch(image.dataUrl);\n        const blob = await response.blob();\n        const file = new File([blob], `toy-scan-${Date.now()}.jpg`, {\n          type: 'image/jpeg'\n        });\n        return file;\n      }\n\n      return null;\n    } catch (error) {\n      console.error('Error taking picture:', error);\n      setIsSupported(false);\n      return null;\n    }\n  };\n\n  const selectFromGallery = async (): Promise<File | null> => {\n    try {\n      if (!Capacitor.isNativePlatform()) {\n        return null;\n      }\n\n      const image: Photo = await Camera.getPhoto({\n        quality: 90,\n        allowEditing: false,\n        resultType: CameraResultType.DataUrl,\n        source: CameraSource.Photos\n      });\n\n      if (image.dataUrl) {\n        const response = await fetch(image.dataUrl);\n        const blob = await response.blob();\n        const file = new File([blob], `toy-upload-${Date.now()}.jpg`, {\n          type: 'image/jpeg'\n        });\n        return file;\n      }\n\n      return null;\n    } catch (error) {\n      console.error('Error selecting from gallery:', error);\n      return null;\n    }\n  };\n\n  const requestPermissions = async (): Promise<boolean> => {\n    try {\n      const permissions = await Camera.requestPermissions();\n      return permissions.camera === 'granted' && permissions.photos === 'granted';\n    } catch (error) {\n      console.error('Error requesting camera permissions:', error);\n      return false;\n    }\n  };\n\n  return {\n    takePicture,\n    selectFromGallery,\n    requestPermissions,\n    isSupported,\n    isNative: Capacitor.isNativePlatform()\n  };\n}","size_bytes":2352},"client/src/hooks/use-native-features.ts":{"content":"import { useEffect, useState } from 'react';\nimport { Capacitor } from '@capacitor/core';\nimport { App } from '@capacitor/app';\nimport { StatusBar, Style } from '@capacitor/status-bar';\nimport { SplashScreen } from '@capacitor/splash-screen';\nimport { PushNotifications, Token, PushNotificationSchema, ActionPerformed } from '@capacitor/push-notifications';\n\nexport function useNativeFeatures() {\n  const [isNative] = useState(Capacitor.isNativePlatform());\n  const [pushToken, setPushToken] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!isNative) return;\n\n    const initializeNativeFeatures = async () => {\n      // Configure status bar\n      await StatusBar.setStyle({ style: Style.Default });\n\n      // Hide splash screen\n      await SplashScreen.hide();\n\n      // Setup push notifications\n      await setupPushNotifications();\n\n      // Setup app state listeners\n      App.addListener('appStateChange', ({ isActive }) => {\n        console.log('App state changed. Is active?', isActive);\n      });\n\n      App.addListener('appUrlOpen', ({ url }) => {\n        console.log('App opened with URL:', url);\n        // Handle deep links here\n      });\n    };\n\n    initializeNativeFeatures();\n\n    return () => {\n      // Cleanup listeners\n      App.removeAllListeners();\n      PushNotifications.removeAllListeners();\n    };\n  }, [isNative]);\n\n  const setupPushNotifications = async () => {\n    if (!isNative) return;\n\n    try {\n      // Request permission to use push notifications\n      const permission = await PushNotifications.requestPermissions();\n      \n      if (permission.receive === 'granted') {\n        // Register for push notifications\n        await PushNotifications.register();\n\n        // Listen for registration\n        PushNotifications.addListener('registration', (token: Token) => {\n          console.log('Push registration success, token: ' + token.value);\n          setPushToken(token.value);\n        });\n\n        // Listen for registration errors\n        PushNotifications.addListener('registrationError', (error: any) => {\n          console.error('Error on registration: ' + JSON.stringify(error));\n        });\n\n        // Listen for push notifications\n        PushNotifications.addListener('pushNotificationReceived', (notification: PushNotificationSchema) => {\n          console.log('Push notification received: ', notification);\n          // Handle foreground notifications\n        });\n\n        // Listen for notification actions\n        PushNotifications.addListener('pushNotificationActionPerformed', (notification: ActionPerformed) => {\n          console.log('Push notification action performed', notification.actionId, notification.inputValue);\n          // Handle notification tap/action\n        });\n      }\n    } catch (error) {\n      console.error('Error setting up push notifications:', error);\n    }\n  };\n\n  const sendTestNotification = async (title: string, body: string) => {\n    if (!isNative) return;\n\n    try {\n      // This would typically be called from your backend\n      // For demo purposes, we'll show a local notification concept\n      console.log('Would send push notification:', { title, body });\n    } catch (error) {\n      console.error('Error sending notification:', error);\n    }\n  };\n\n  const exitApp = () => {\n    if (isNative) {\n      App.exitApp();\n    }\n  };\n\n  return {\n    isNative,\n    pushToken,\n    sendTestNotification,\n    exitApp\n  };\n}","size_bytes":3415},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-websocket.ts":{"content":"import { useState, useEffect, useRef } from 'react';\n\nexport type ConnectionStatus = 'connecting' | 'connected' | 'disconnected';\n\ninterface WebSocketMessage {\n  type: string;\n  payload: any;\n  userId?: string;\n}\n\nexport function useWebSocket() {\n  const [connectionStatus, setConnectionStatus] = useState<ConnectionStatus>('disconnected');\n  const [lastMessage, setLastMessage] = useState<WebSocketMessage | null>(null);\n  const ws = useRef<WebSocket | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout>();\n\n  const connect = () => {\n    if (ws.current?.readyState === WebSocket.OPEN) {\n      return;\n    }\n\n    setConnectionStatus('connecting');\n    \n    // Use the current domain for WebSocket connection with specific path\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const wsUrl = `${protocol}//${window.location.host}/ws/api`;\n    \n    ws.current = new WebSocket(wsUrl);\n\n    ws.current.onopen = () => {\n      setConnectionStatus('connected');\n      console.log('WebSocket connected');\n      \n      // Register user for targeted messages\n      if (ws.current) {\n        ws.current.send(JSON.stringify({\n          type: 'register',\n          userId: 'demo-user' // In real app, get from auth context\n        }));\n      }\n    };\n\n    ws.current.onmessage = (event) => {\n      try {\n        const message: WebSocketMessage = JSON.parse(event.data);\n        setLastMessage(message);\n        console.log('WebSocket message received:', message);\n      } catch (error) {\n        console.error('Failed to parse WebSocket message:', error);\n      }\n    };\n\n    ws.current.onclose = () => {\n      setConnectionStatus('disconnected');\n      console.log('WebSocket disconnected');\n      \n      // Attempt to reconnect after 3 seconds\n      reconnectTimeoutRef.current = setTimeout(() => {\n        connect();\n      }, 3000);\n    };\n\n    ws.current.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      setConnectionStatus('disconnected');\n    };\n  };\n\n  const disconnect = () => {\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n    }\n    \n    if (ws.current) {\n      ws.current.close();\n      ws.current = null;\n    }\n    \n    setConnectionStatus('disconnected');\n  };\n\n  const sendMessage = (message: WebSocketMessage) => {\n    if (ws.current?.readyState === WebSocket.OPEN) {\n      ws.current.send(JSON.stringify(message));\n    } else {\n      console.warn('WebSocket not connected, cannot send message');\n    }\n  };\n\n  useEffect(() => {\n    connect();\n    \n    return () => {\n      disconnect();\n    };\n  }, []);\n\n  // Keep connection alive with ping/pong\n  useEffect(() => {\n    if (connectionStatus === 'connected') {\n      const pingInterval = setInterval(() => {\n        sendMessage({ type: 'ping', payload: {} });\n      }, 30000); // Ping every 30 seconds\n\n      return () => clearInterval(pingInterval);\n    }\n  }, [connectionStatus]);\n\n  return {\n    connectionStatus,\n    lastMessage,\n    sendMessage,\n    connect,\n    disconnect\n  };\n}\n","size_bytes":3055},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { CameraCapture } from \"@/components/camera-capture\";\nimport { ScanCard } from \"@/components/scan-card\";\nimport { BottomNavigation } from \"@/components/bottom-navigation\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { useNativeCamera } from \"@/hooks/use-native-camera\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Scan } from \"@shared/schema\";\n\nexport default function Home() {\n  const [showCamera, setShowCamera] = useState(false);\n  const { connectionStatus } = useWebSocket();\n  const { takePicture, selectFromGallery, isNative, requestPermissions } = useNativeCamera();\n  const { toast } = useToast();\n\n  const { data: recentScans = [], isLoading } = useQuery<Scan[]>({\n    queryKey: ['/api/v1/scans'],\n    select: (data) => data.slice(0, 3), // Show only 3 most recent\n  });\n\n  const { data: marketplaceStatus = [] } = useQuery({\n    queryKey: ['/api/v1/marketplace/connections'],\n  });\n\n  const getMarketplaceIcon = (marketplace: string) => {\n    switch (marketplace) {\n      case 'ebay': return 'fab fa-ebay';\n      case 'amazon': return 'fab fa-amazon';\n      case 'wordpress': return 'fab fa-wordpress';\n      default: return 'fas fa-store';\n    }\n  };\n\n  const getStatusColor = (connected: boolean) => {\n    return connected ? 'bg-green-400' : 'bg-yellow-400';\n  };\n\n  const getStatusText = (connected: boolean) => {\n    return connected ? 'Connected' : 'Setup Required';\n  };\n\n  const getStatusTextColor = (connected: boolean) => {\n    return connected ? 'text-green-600' : 'text-yellow-600';\n  };\n\n  const handleNativeCamera = async () => {\n    try {\n      const hasPermission = await requestPermissions();\n      if (!hasPermission) {\n        toast({\n          title: \"Camera Permission Required\",\n          description: \"Please grant camera access to take photos\",\n          variant: \"destructive\"\n        });\n        return;\n      }\n\n      const file = await takePicture();\n      if (file) {\n        // Process the captured image\n        handleImageCapture(file);\n      }\n    } catch (error) {\n      console.error('Camera error:', error);\n      toast({\n        title: \"Camera Error\",\n        description: \"Unable to access camera. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleNativeGallery = async () => {\n    try {\n      const file = await selectFromGallery();\n      if (file) {\n        handleImageCapture(file);\n      }\n    } catch (error) {\n      console.error('Gallery error:', error);\n      toast({\n        title: \"Gallery Error\", \n        description: \"Unable to access photo gallery. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleImageCapture = async (file: File) => {\n    try {\n      // Create FormData for upload\n      const formData = new FormData();\n      formData.append('image', file);\n\n      // Upload and analyze the image\n      const response = await fetch('/api/v1/scans/analyze', {\n        method: 'POST',\n        headers: {\n          'X-User-Id': 'demo-user'\n        },\n        body: formData\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        toast({\n          title: \"Analysis Started\",\n          description: \"Your toy is being analyzed. You'll see results shortly!\",\n        });\n        \n        // Refresh scans data\n        // queryClient.invalidateQueries(['/api/v1/scans']);\n      } else {\n        throw new Error('Upload failed');\n      }\n    } catch (error) {\n      console.error('Upload error:', error);\n      toast({\n        title: \"Upload Error\",\n        description: \"Failed to upload image. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  if (showCamera) {\n    return (\n      <CameraCapture\n        onClose={() => setShowCamera(false)}\n        onCapture={(file) => {\n          console.log('Image captured:', file);\n          setShowCamera(false);\n        }}\n      />\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-gray-200 sticky top-0 z-50\">\n        <div className=\"max-w-lg mx-auto px-4 py-3\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"bg-primary-500 p-2 rounded-lg\">\n                <i className=\"fas fa-robot text-white text-lg\"></i>\n              </div>\n              <div>\n                <h1 className=\"text-lg font-bold text-gray-900\">ToyResaleWizard</h1>\n                <p className=\"text-xs text-gray-500\">\n                  {connectionStatus === 'connected' ? 'Connected' : \n                   connectionStatus === 'connecting' ? 'Connecting...' : 'Disconnected'}\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <button \n                className=\"relative p-2 text-gray-600 hover:bg-gray-100 rounded-lg\"\n                data-testid=\"button-notifications\"\n              >\n                <i className=\"fas fa-bell\"></i>\n                <span className=\"absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center\">\n                  3\n                </span>\n              </button>\n              <button \n                className=\"p-2 text-gray-600 hover:bg-gray-100 rounded-lg\"\n                data-testid=\"button-menu\"\n              >\n                <i className=\"fas fa-bars\"></i>\n              </button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-lg mx-auto px-4 pb-20\">\n        {/* Hero Section */}\n        <section className=\"py-6\">\n          <div className=\"text-center mb-6\">\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\n              Sell Your Toys with AI\n            </h2>\n            <p className=\"text-gray-600\">\n              Snap a photo, get instant pricing, and list across multiple marketplaces\n            </p>\n          </div>\n\n          {/* Camera/Upload Section */}\n          <Card className=\"p-6 mb-6\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <Button\n                variant=\"outline\"\n                className=\"flex flex-col items-center justify-center py-8 h-auto border-2 border-dashed border-primary-300 bg-primary-50 hover:bg-primary-100 text-primary-700\"\n                onClick={() => {\n                  if (isNative) {\n                    handleNativeCamera();\n                  } else {\n                    setShowCamera(true);\n                  }\n                }}\n                data-testid=\"button-camera\"\n              >\n                <i className=\"fas fa-camera text-primary-500 text-2xl mb-3\"></i>\n                <span className=\"font-medium\">Take Photo</span>\n                <span className=\"text-xs text-primary-600 mt-1\">Use Camera</span>\n              </Button>\n\n              <Button\n                variant=\"outline\"\n                className=\"flex flex-col items-center justify-center py-8 h-auto border-2 border-dashed border-gray-300 bg-gray-50 hover:bg-gray-100\"\n                onClick={() => {\n                  if (isNative) {\n                    handleNativeGallery();\n                  } else {\n                    // Web file input fallback\n                    const input = document.createElement('input');\n                    input.type = 'file';\n                    input.accept = 'image/*';\n                    input.onchange = (e) => {\n                      const file = (e.target as HTMLInputElement).files?.[0];\n                      if (file) handleImageCapture(file);\n                    };\n                    input.click();\n                  }\n                }}\n                data-testid=\"button-upload\"\n              >\n                <i className=\"fas fa-upload text-gray-500 text-2xl mb-3\"></i>\n                <span className=\"text-gray-700 font-medium\">Upload</span>\n                <span className=\"text-xs text-gray-600 mt-1\">From Gallery</span>\n              </Button>\n            </div>\n\n            {/* Quick Tips */}\n            <div className=\"mt-4 p-3 bg-yellow-50 rounded-lg border border-yellow-200\">\n              <div className=\"flex items-start space-x-2\">\n                <i className=\"fas fa-lightbulb text-yellow-600 text-sm mt-0.5\"></i>\n                <div className=\"text-sm text-yellow-800\">\n                  <span className=\"font-medium\">Pro Tip:</span> Take photos in good lighting \n                  with the toy clearly visible for best AI analysis\n                </div>\n              </div>\n            </div>\n          </Card>\n        </section>\n\n        {/* Recent Scans Section */}\n        <section className=\"mb-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Recent Scans</h3>\n            <Button variant=\"ghost\" className=\"text-primary-600 text-sm font-medium\">\n              View All\n            </Button>\n          </div>\n\n          {isLoading ? (\n            <div className=\"space-y-3\">\n              {[1, 2, 3].map((i) => (\n                <div key={i} className=\"bg-white rounded-xl p-4 animate-pulse\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-16 h-16 bg-gray-200 rounded-lg\"></div>\n                    <div className=\"flex-1\">\n                      <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                      <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : recentScans.length > 0 ? (\n            <div className=\"space-y-3\">\n              {recentScans.map((scan) => (\n                <ScanCard key={scan.id} scan={scan} />\n              ))}\n            </div>\n          ) : (\n            <Card className=\"p-8 text-center\">\n              <i className=\"fas fa-history text-gray-400 text-3xl mb-3\"></i>\n              <h4 className=\"font-medium text-gray-900 mb-1\">No scans yet</h4>\n              <p className=\"text-sm text-gray-600\">\n                Start by taking a photo or uploading an image of your toy\n              </p>\n            </Card>\n          )}\n        </section>\n\n        {/* Quick Actions */}\n        <section className=\"mb-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Quick Actions</h3>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <Button \n              variant=\"outline\" \n              className=\"bg-white h-auto p-4 flex flex-col items-center space-y-2\"\n              data-testid=\"button-price-history\"\n            >\n              <i className=\"fas fa-chart-line text-secondary-500 text-xl\"></i>\n              <div className=\"text-center\">\n                <div className=\"text-sm font-medium text-gray-900\">Price History</div>\n                <div className=\"text-xs text-gray-600\">Market trends</div>\n              </div>\n            </Button>\n            \n            <Button \n              variant=\"outline\" \n              className=\"bg-white h-auto p-4 flex flex-col items-center space-y-2\"\n              data-testid=\"button-listings\"\n            >\n              <i className=\"fas fa-store text-orange-500 text-xl\"></i>\n              <div className=\"text-center\">\n                <div className=\"text-sm font-medium text-gray-900\">My Listings</div>\n                <div className=\"text-xs text-gray-600\">Active sales</div>\n              </div>\n            </Button>\n            \n            <Button \n              variant=\"outline\" \n              className=\"bg-white h-auto p-4 flex flex-col items-center space-y-2\"\n              data-testid=\"button-analytics\"\n            >\n              <i className=\"fas fa-chart-bar text-purple-500 text-xl\"></i>\n              <div className=\"text-center\">\n                <div className=\"text-sm font-medium text-gray-900\">Analytics</div>\n                <div className=\"text-xs text-gray-600\">Performance</div>\n              </div>\n            </Button>\n            \n            <Button \n              variant=\"outline\" \n              className=\"bg-white h-auto p-4 flex flex-col items-center space-y-2\"\n              data-testid=\"button-settings\"\n            >\n              <i className=\"fas fa-cog text-gray-500 text-xl\"></i>\n              <div className=\"text-center\">\n                <div className=\"text-sm font-medium text-gray-900\">Settings</div>\n                <div className=\"text-xs text-gray-600\">Preferences</div>\n              </div>\n            </Button>\n          </div>\n        </section>\n\n        {/* Marketplace Status */}\n        <section className=\"mb-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Marketplace Status</h3>\n          <Card className=\"p-4\">\n            <div className=\"space-y-3\">\n              {marketplaceStatus.map((marketplace: any) => (\n                <div key={marketplace.marketplace} className=\"flex items-center justify-between py-2\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center\">\n                      <i className={`${getMarketplaceIcon(marketplace.marketplace)} text-blue-600`}></i>\n                    </div>\n                    <span className=\"font-medium text-gray-900 capitalize\">\n                      {marketplace.marketplace}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className={`w-2 h-2 rounded-full ${getStatusColor(marketplace.connected)}`}></div>\n                    <span className={`text-sm font-medium ${getStatusTextColor(marketplace.connected)}`}>\n                      {getStatusText(marketplace.connected)}\n                    </span>\n                  </div>\n                </div>\n              ))}\n            </div>\n            \n            <Button \n              variant=\"outline\" \n              className=\"w-full mt-4 bg-primary-50 text-primary-700 hover:bg-primary-100\"\n              data-testid=\"button-configure-marketplaces\"\n            >\n              Configure Marketplaces\n            </Button>\n          </Card>\n        </section>\n      </main>\n\n      <BottomNavigation currentPage=\"home\" />\n    </div>\n  );\n}\n","size_bytes":14533},"client/src/pages/listings.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { BottomNavigation } from \"@/components/bottom-navigation\";\nimport type { Listing } from \"@shared/schema\";\n\nexport default function Listings() {\n  const { data: listings = [], isLoading } = useQuery<Listing[]>({\n    queryKey: ['/api/v1/listings'],\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-green-100 text-green-800';\n      case 'sold': return 'bg-blue-100 text-blue-800';\n      case 'draft': return 'bg-gray-100 text-gray-800';\n      case 'cancelled': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getMarketplaceIcon = (marketplace: string) => {\n    switch (marketplace) {\n      case 'ebay': return 'fab fa-ebay text-blue-600';\n      case 'amazon': return 'fab fa-amazon text-orange-600';\n      case 'wordpress': return 'fab fa-wordpress text-blue-600';\n      default: return 'fas fa-store text-gray-600';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <header className=\"bg-white shadow-sm border-b border-gray-200 sticky top-0 z-50\">\n        <div className=\"max-w-lg mx-auto px-4 py-3\">\n          <div className=\"flex items-center justify-between\">\n            <h1 className=\"text-lg font-bold text-gray-900\">My Listings</h1>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              data-testid=\"button-create-listing\"\n            >\n              <i className=\"fas fa-plus mr-2\"></i>\n              New\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-lg mx-auto px-4 pb-20 py-6\">\n        {/* Stats */}\n        <div className=\"grid grid-cols-4 gap-2 mb-6 text-center\">\n          <Card className=\"p-3\">\n            <div className=\"text-xl font-bold text-gray-900\" data-testid=\"text-total-listings\">\n              {listings.length}\n            </div>\n            <div className=\"text-xs text-gray-600\">Total</div>\n          </Card>\n          <Card className=\"p-3\">\n            <div className=\"text-xl font-bold text-green-600\" data-testid=\"text-active-listings\">\n              {listings.filter(l => l.status === 'active').length}\n            </div>\n            <div className=\"text-xs text-gray-600\">Active</div>\n          </Card>\n          <Card className=\"p-3\">\n            <div className=\"text-xl font-bold text-blue-600\" data-testid=\"text-sold-listings\">\n              {listings.filter(l => l.status === 'sold').length}\n            </div>\n            <div className=\"text-xs text-gray-600\">Sold</div>\n          </Card>\n          <Card className=\"p-3\">\n            <div className=\"text-xl font-bold text-gray-600\" data-testid=\"text-draft-listings\">\n              {listings.filter(l => l.status === 'draft').length}\n            </div>\n            <div className=\"text-xs text-gray-600\">Drafts</div>\n          </Card>\n        </div>\n\n        {/* Listings */}\n        {isLoading ? (\n          <div className=\"space-y-3\">\n            {[1, 2, 3, 4].map((i) => (\n              <div key={i} className=\"bg-white rounded-xl p-4 animate-pulse\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-16 h-16 bg-gray-200 rounded-lg\"></div>\n                  <div className=\"flex-1\">\n                    <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-1/2 mb-2\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-1/3\"></div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : listings.length > 0 ? (\n          <div className=\"space-y-3\">\n            {listings.map((listing) => (\n              <Card key={listing.id} className=\"p-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-16 h-16 bg-gray-200 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-image text-gray-400\"></i>\n                  </div>\n                  \n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-start justify-between\">\n                      <h4 className=\"font-medium text-gray-900 truncate\" data-testid={`text-listing-title-${listing.id}`}>\n                        {listing.title}\n                      </h4>\n                      <Badge className={getStatusColor(listing.status)}>\n                        {listing.status}\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2 mt-1 mb-2\">\n                      <i className={getMarketplaceIcon(listing.marketplace)}></i>\n                      <span className=\"text-sm text-gray-600 capitalize\">\n                        {listing.marketplace}\n                      </span>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-lg font-bold text-green-600\" data-testid={`text-listing-price-${listing.id}`}>\n                        ${listing.price}\n                      </span>\n                      <div className=\"flex space-x-2\">\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          data-testid={`button-edit-listing-${listing.id}`}\n                        >\n                          <i className=\"fas fa-edit\"></i>\n                        </Button>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          data-testid={`button-view-listing-${listing.id}`}\n                        >\n                          <i className=\"fas fa-external-link-alt\"></i>\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <Card className=\"p-8 text-center\">\n            <i className=\"fas fa-store text-gray-400 text-4xl mb-4\"></i>\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No listings yet</h3>\n            <p className=\"text-gray-600 mb-4\">\n              Create your first listing to start selling on marketplaces\n            </p>\n            <Button className=\"bg-primary-600 hover:bg-primary-700\" data-testid=\"button-create-first-listing\">\n              <i className=\"fas fa-plus mr-2\"></i>\n              Create Listing\n            </Button>\n          </Card>\n        )}\n      </main>\n\n      <BottomNavigation currentPage=\"listings\" />\n    </div>\n  );\n}\n","size_bytes":6874},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/profile.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { BottomNavigation } from \"@/components/bottom-navigation\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function Profile() {\n  const { data: marketplaceConnections = [] } = useQuery({\n    queryKey: ['/api/v1/marketplace/connections'],\n  });\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <header className=\"bg-white shadow-sm border-b border-gray-200 sticky top-0 z-50\">\n        <div className=\"max-w-lg mx-auto px-4 py-3\">\n          <h1 className=\"text-lg font-bold text-gray-900\">Profile & Settings</h1>\n        </div>\n      </header>\n\n      <main className=\"max-w-lg mx-auto px-4 pb-20 py-6 space-y-6\">\n        {/* User Profile */}\n        <Card className=\"p-4\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"w-16 h-16 bg-primary-100 rounded-full flex items-center justify-center\">\n              <i className=\"fas fa-user text-primary-600 text-2xl\"></i>\n            </div>\n            <div className=\"flex-1\">\n              <h2 className=\"text-lg font-semibold text-gray-900\" data-testid=\"text-username\">Demo User</h2>\n              <p className=\"text-sm text-gray-600\" data-testid=\"text-email\">demo@toyresalewizard.com</p>\n              <p className=\"text-xs text-gray-500\">Member since Aug 2025</p>\n            </div>\n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-edit-profile\">\n              <i className=\"fas fa-edit\"></i>\n            </Button>\n          </div>\n        </Card>\n\n        {/* App Settings */}\n        <Card className=\"p-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">App Settings</h3>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"font-medium text-gray-900\">Push Notifications</div>\n                <div className=\"text-sm text-gray-600\">Get notified about scan results</div>\n              </div>\n              <Switch defaultChecked data-testid=\"switch-notifications\" />\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"font-medium text-gray-900\">Auto-list Items</div>\n                <div className=\"text-sm text-gray-600\">Automatically create listings after scan</div>\n              </div>\n              <Switch data-testid=\"switch-auto-list\" />\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"font-medium text-gray-900\">Dark Mode</div>\n                <div className=\"text-sm text-gray-600\">Use dark theme</div>\n              </div>\n              <Switch data-testid=\"switch-dark-mode\" />\n            </div>\n          </div>\n        </Card>\n\n        {/* Marketplace Connections */}\n        <Card className=\"p-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Connected Marketplaces</h3>\n          <div className=\"space-y-3\">\n            {marketplaceConnections.map((marketplace: any) => (\n              <div key={marketplace.marketplace} className=\"flex items-center justify-between py-2\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <i className={`fab fa-${marketplace.marketplace} text-blue-600`}></i>\n                  </div>\n                  <div>\n                    <div className=\"font-medium text-gray-900 capitalize\">\n                      {marketplace.marketplace}\n                    </div>\n                    <div className=\"text-sm text-gray-600\">\n                      {marketplace.connected ? 'Connected' : 'Not connected'}\n                    </div>\n                  </div>\n                </div>\n                <Button \n                  variant={marketplace.connected ? \"outline\" : \"default\"}\n                  size=\"sm\"\n                  data-testid={`button-${marketplace.marketplace}-connect`}\n                >\n                  {marketplace.connected ? 'Disconnect' : 'Connect'}\n                </Button>\n              </div>\n            ))}\n          </div>\n        </Card>\n\n        {/* Performance Stats */}\n        <Card className=\"p-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Performance</h3>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-primary-600\" data-testid=\"text-total-scans-stat\">24</div>\n              <div className=\"text-sm text-gray-600\">Total Scans</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600\" data-testid=\"text-items-sold-stat\">8</div>\n              <div className=\"text-sm text-gray-600\">Items Sold</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-secondary-600\" data-testid=\"text-total-revenue-stat\">$480</div>\n              <div className=\"text-sm text-gray-600\">Total Revenue</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-purple-600\" data-testid=\"text-avg-price-stat\">$60</div>\n              <div className=\"text-sm text-gray-600\">Avg. Price</div>\n            </div>\n          </div>\n        </Card>\n\n        {/* Additional Options */}\n        <Card className=\"p-4\">\n          <div className=\"space-y-3\">\n            <Button \n              variant=\"ghost\" \n              className=\"w-full justify-start\"\n              data-testid=\"button-help-support\"\n            >\n              <i className=\"fas fa-question-circle mr-3\"></i>\n              Help & Support\n            </Button>\n            <Button \n              variant=\"ghost\" \n              className=\"w-full justify-start\"\n              data-testid=\"button-privacy-policy\"\n            >\n              <i className=\"fas fa-shield-alt mr-3\"></i>\n              Privacy Policy\n            </Button>\n            <Button \n              variant=\"ghost\" \n              className=\"w-full justify-start\"\n              data-testid=\"button-terms-service\"\n            >\n              <i className=\"fas fa-file-contract mr-3\"></i>\n              Terms of Service\n            </Button>\n            <Button \n              variant=\"ghost\" \n              className=\"w-full justify-start text-red-600 hover:text-red-700\"\n              data-testid=\"button-sign-out\"\n            >\n              <i className=\"fas fa-sign-out-alt mr-3\"></i>\n              Sign Out\n            </Button>\n          </div>\n        </Card>\n      </main>\n\n      <BottomNavigation currentPage=\"profile\" />\n    </div>\n  );\n}\n","size_bytes":6884},"client/src/pages/scans.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScanCard } from \"@/components/scan-card\";\nimport { BottomNavigation } from \"@/components/bottom-navigation\";\nimport type { Scan } from \"@shared/schema\";\n\nexport default function Scans() {\n  const { data: scans = [], isLoading } = useQuery<Scan[]>({\n    queryKey: ['/api/v1/scans'],\n  });\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <header className=\"bg-white shadow-sm border-b border-gray-200 sticky top-0 z-50\">\n        <div className=\"max-w-lg mx-auto px-4 py-3\">\n          <div className=\"flex items-center justify-between\">\n            <h1 className=\"text-lg font-bold text-gray-900\">My Scans</h1>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              data-testid=\"button-filter\"\n            >\n              <i className=\"fas fa-filter mr-2\"></i>\n              Filter\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-lg mx-auto px-4 pb-20 py-6\">\n        {/* Stats */}\n        <div className=\"grid grid-cols-3 gap-4 mb-6\">\n          <Card className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-gray-900\" data-testid=\"text-total-scans\">\n              {scans.length}\n            </div>\n            <div className=\"text-sm text-gray-600\">Total Scans</div>\n          </Card>\n          <Card className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-green-600\" data-testid=\"text-completed-scans\">\n              {scans.filter(s => s.status === 'completed').length}\n            </div>\n            <div className=\"text-sm text-gray-600\">Completed</div>\n          </Card>\n          <Card className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-yellow-600\" data-testid=\"text-processing-scans\">\n              {scans.filter(s => s.status === 'processing').length}\n            </div>\n            <div className=\"text-sm text-gray-600\">Processing</div>\n          </Card>\n        </div>\n\n        {/* Scans List */}\n        {isLoading ? (\n          <div className=\"space-y-3\">\n            {[1, 2, 3, 4, 5].map((i) => (\n              <div key={i} className=\"bg-white rounded-xl p-4 animate-pulse\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-16 h-16 bg-gray-200 rounded-lg\"></div>\n                  <div className=\"flex-1\">\n                    <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-1/2 mb-2\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-1/3\"></div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : scans.length > 0 ? (\n          <div className=\"space-y-3\">\n            {scans.map((scan) => (\n              <ScanCard key={scan.id} scan={scan} showDetails />\n            ))}\n          </div>\n        ) : (\n          <Card className=\"p-8 text-center\">\n            <i className=\"fas fa-camera text-gray-400 text-4xl mb-4\"></i>\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No scans yet</h3>\n            <p className=\"text-gray-600 mb-4\">\n              Start scanning your toys to see AI-powered analysis and pricing\n            </p>\n            <Button className=\"bg-primary-600 hover:bg-primary-700\" data-testid=\"button-start-scanning\">\n              <i className=\"fas fa-camera mr-2\"></i>\n              Start Scanning\n            </Button>\n          </Card>\n        )}\n      </main>\n\n      <BottomNavigation currentPage=\"scans\" />\n    </div>\n  );\n}\n","size_bytes":3712},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}